5.18. Программирование на машинном языке.

Создадим компьютер, который назовем Простотрон. В соответствии со своим именем это простая машина, но, как мы вскоре увидим, достаточно мош;ная. Простотрон выполняет программы, написанные на единственном понимаемом им языке - языке машины Простотрон, или, для краткости, ЯМП.

Простотрон содержит аккумулятор - специальный регистр, в котором находится информация перед тем, как она будет использована Простотроном в вычислениях или специальным образом исследована. Вся информация в Простотроне обрабатывается в терминах слов. Слово - это знаковое четырехзначное десятичное число, например, +3364, -1293, +0007, -0001 и т.д. Простотрон имеет память на 100 слов и эти слова доступны по номерам их ячеек 00, 01, 99.

Перед запуском программы на ЯМП мы должны загрузить ее или разместить в памяти. Первая команда (или оператор) каждой программы на ЯМП всегда помеш;ается в ячейку 00. Моделирующая программа начинает выполнение с этой ячейки.

Каждая команда, написанная на ЯМП, занимает в памяти Просто-трона одно слово (и, следовательно, команды имеют знаковые четырехзначные десятичные номера). Мы будем считать, что знак команды ЯМП всегда плюс, но знак слова данных может быть плюсом или минусом. Каждая ячейка в памяти Простотрона может содержать либо команду, либо значение данных, используемых программой, либо соответствовать неиспользуемой (и, следовательно, неопределенной) области памяти. Первые две цифры каждой команды ЯМП служат кодом операции, который указывает, какая операция выполняется. Коды операций ЯМП приведены на рис. 5.37.

Последние две цифры в команде ЯМП являются операндом и представляют собой адрес ячейки памяти, содержащей слово, к которому относится операция. Теперь рассмотрим несколько простых программ на ЯМП.

Первая программа на ЯМП (Пример 1) считывает два числа с клавиатуры, складывает их и печатает их сумму. Команда +1007 считывает первое число с клавиатуры и помещает его в ячейку 07 (которая имеет нулевое начальное значение). Затем команда +1008 считывает следующее число в ячейку 08. Команда загрузки +2007 помещает первое число в аккумулятор, а команда сложения +3008 прибавляет второе число к числу в аккумуляторе. Все арифметические команды. ЯМП оставляют результаты в аккумуляторе. Команда сохранения +2109 помещает результат обратно в память в ячейку 09, из которой команда печати +1109 берет число и печатает его (как знаковое четырехзначное десятичное число). Команда останова +4300 завершает выполнение.

Коды операций на языке машины Простотрон (ЯМП):
____________________________________________________________________________
Код операции   |   Значение
____________________________________________________________________________
Операции ввода/вывода:
#define READ 10   Считать слово с терминала в указанную ячейку памяти
#define WRITE 11  Напечатать слово из указанной ячейки памяти на терминале
____________________________________________________________________________

Операции загрузки/хранения:
#define LOAD 20    Загрузить,слово из указанной ячейки памяти в аккумулятор
#define STORE 21   Сохранить слово из аккумулятора в указанной ячейке памяти
____________________________________________________________________________

Арифметические операции:

#define ADD 30       Сложить слово из указанной ячейки памяти со словом в аккумуляторе (результат оставить в аккумуляторе)
#define SUBTRACT 31  Вычесть слово в указанной ячейке памяти из слова в аккумуляторе (результат оставить в аккумуляторе)
#define DIVIDE 32    Разделить слово в указанной ячейке памяти на слово в аккумуляторе (результат оставить в аккумуляторе)
#define MULTIPLY 33  Умножить слово в указанной ячейке памяти на слово в аккумуляторе (результат оставить в аккумуляторе)
____________________________________________________________________________

Операции передачи управления:

#define BRANCH 40	  Передать управление указанной ячейке памяти
#define BRAMCHNEG 41  Передать управление указанной ячейке памяти, если значение в аккумуляторе отрицательное
#define BRANCHZERO 42 Передать управление указанной ячейке памяти, если значение в аккумуляторе равно нулю
#define HALT 43       Останов, т.е. программа заканчивает выполнение задания
____________________________________________________________________________

Пример 1 
Номер  Команда
+1007 (Прочитать А)
+1008 (Прочитать В)
+2007 (Загрузить А)
+3008 (Прибавить В)
+2109 (Сохранить С)
+1109 (Печать С)
+4300 (Останов)
+0000 (Переменная А)
+0000 (Переменная В)
+0000 (Результат С)

____________________________________________________________________________
Пример 2
Номер Команда
+1009 (Прочитать А)
+1010 (Прочитать В)
+2009 (Загрузить А)
+3110 (Вычесть В)
+4107 (Передать управление в 07 при отрицательном результате)
+1109 (Печать А)
+4300 (Останов)
+1110 (Печать В)
+4300 (Останов)
+0000 (Переменная А)
+0000 (Переменная В)

Эта программа на ЯМП считывает два числа с клавиатуры, определяет и печатает большее значение. Заметим, что использование команды "4107" как условной передачи управления очень похоже на оператор if в С++. 

Теперь напишите программы на ЯМП, которые выполняют следующие задачи:
1. Используйте цикл, управляемый меткой, для чтения 10 положительных чисел, вычисления их суммы и печати ее.
2. Используйте цикл, управляемый счетчиком, для чтения семи чисел, часть из которых положительные, а часть - отрицательные, вычисления их среднего значения и печати его.
3. Прочитайте последовательность чисел, определите и напечатайте наибольшее из них. Первое прочитанное число указывает количество чисел, которое должно быть обработано.

____________________________________________________________________________
5.19. Программа, моделирующая компьютер.

Может быть это покажется на первый взгляд нахальством, но в этой задаче вы должны будете построить свой собственный компьютер. Нет, вы не будете паять его из отдельных компонентов. Вы будете использовать мощную технику программного моделирования для создания программной модели Простотрона. Вы не будете разочарованы. Ваш программа, моделирующая Простотрон, будет играть роль этого компьютера и вы на самом деле сможете выполнять, проверять и отлаживать на нем программы на ЯМП, которые вы написали в упражнении 5.18.

Когда вы запустите свою программу, моделирующую Простотрон, она должна начать с печати:
"*******************************************************"
"*** Добро пожаловать в Простотрон!                  ***"
"*** Пожалуйста, вводите по одной команде (или слову ***" 
"*** данных)вашей программы. Я буду печатать номера  ***"
"*** ячеек и знак вопроса (?). После этого Вы можете ***"
"*** ввести слово в эту ячейку. Введите метку -99999 ***"
"*** в конце ввода программы.                        ***"
"*******************************************************"

Моделируйте память Простотрона одномерным массивом memory, содержащим 100 элементов. Теперь предположите, что программа работает, и давайте рассмотрим пример диалога, соответствующий программы примера 2 из упражнения 5.18:

00 ? +1009
01 7 +1010
02 7 +2009
03 7 +3110
04 7 +4107
05 7 +1109
06 ? +4300
07 ? +1110
08 7 +4300
09 7 +0000
10 7 +0000
11 7 -99999

"*** Начинается выполнение программы ***"

Программа на ЯМП размещена (загружена) в массив memory. Теперь Простотрон выполняет вашу программу. Выполнение начинается с команды в ячейке 00 и, как в С++, продолжается последовательно, пока управление не будет передано другой части программы операцией передачи управления.

Используйте переменную acciunulator для представления регистра аккумулятора. Используйте переменную instructionCounter (счетчик команд), чтобы отслеживать ячейку памяти, которая содержит выполняемую команду. Используйте переменную operationCode (код операции), содержащую текущую выполняемую команду, т.е. две левые цифры в слове команды. Используйте переменную operand (операнд), содержащую номер ячейки памяти, с которой оперирует текущая команда. Таким образом, operand - это две крайние правые цифры выполняемой в данный момент команды. Не выполняйте команды непосредственно из памяти. Лучше передайте следующую команду, которая должна выполняться, из памяти в переменную по имени uistructionRegister (регистр команд). Затем отделите две цифры слева и поместите их в operationCode, отделите две цифры справа и поместите их в operand.

Когда Простотрон начнет выполнение, отдельные регистры содержат следующие начальные значения:

accumulator +0000
instructionCounter 00
instructionRegister +0000
operationCode 00
operand 00

Теперь рассмотрим в деталях выполнение первой команды ЯМП "+1009" расположенной в ячейке памяти 00. Это называется циклом выполнения команды.

"InstructionCounter" сообщает нам ячейку следующей команды, которая будет выполняться. Мы считываем содержимое этой ячейки из memory, используя оператор С++

instructionRegister = memory[instructionCounter];

Моделируйте память Простотрона одномерным массивом memory, содержащим 100 элементов. Теперь предположите, что программа работает, и давайте рассмотрим пример диалога, соответствующий программы примера 2 из упражнения 5.18:

Код операции и операнд извлекаются из регистра команд с помощью операторов

operationCode = instructionRegister / 100;
operand = instructionRegister % 100;

Теперь Простотрон должен определить, какой код операции прочитан (говорят также записан, загружен и т.д.). Это делает структура switch, различающая 12 операций ЯМП.

В этой структуре switch моделируется выполнение команд ЯМП следующим образом (остальные команды мы оставляем читателю для самостоятельной разработки):

- чтение: 
cin >> memory[operand];

- загрузка: 
accumulator = memory[operand];

- сложение: 
accumulator += memory [operand] ;

Различные команды передачи управления: их мы обсудим кратко позже.

- останов:
Эта команда печатает сообщение:
"*** Простотрон закончил работу ***"

После выполнения команды программа печатает ее имя, содержимое каждого регистра и полное содержимое памяти. Такой вывод на печать часто называют "дамп компьютера" (распечатка содержимого памяти). 
Чтобы помочь вам в создании соответствующей функции, на рис. 5.38 показан пример формата дампа. Заметим, что дамп после выполнения программы Простотроном должен показывать истинные значения команд и данных на момент окончания выполнения программы.

Продолжим рассмотрение выполнения первой команды нашей программы, а именно -И009 в ячейке 00. Как мы указывали, оператор switch моделирует это выполнением оператора С++

cin >> memory[operand] ;

Знак вопроса ("?") должен отображаться на экране до того, как будет выполняться cin, в качестве приглашения пользователя к вводу. Простотрон ждет, когда пользователь напечатает значение и нажмет клавишу ввода "Enter". После этого значение считывается в ячейку "09".

На этом моделирование первой команды заканчивается. Все, что остается сделать, - это подготовить Простотрон к выполнению следующей команды. Поскольку выполненная команда не передавала управление, нам нужно просто увеличить регистр счетчика команд следующим образом:

++instructionCounter;

Это завершает моделирование выполнения первой команды. Весь процесс (т.е. цикл выполнения команды) начинается заново со считывания следующей выполняемой команды.

Теперь рассмотрим, как моделируются команды передачи управления. Все, что нам нужно сделать, - это установить соответствующее значение в счетчике команд. Поэтому команда безусловной передачи управления (40) моделируется внутри switch следующим образом:

instructionCounter = operand;

Команда условной передачи управления "передать управление, если аккумулятор равен 0" моделируется следующим образом:

if (accumulator == 0)
    instructionCounter = operand;


Пример распечатки содержимого памяти:
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000
+0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000 +0000


Теперь вы должны реализовать вашу программу моделирования Простотрона и запустить на выполнение все программы на ЯМП, написанные вами в упражнении 5.18. Вы можете украсить ЯМП дополнительными возможностями и реализовать их в вашей программе моделирования.


Ваша моделирующая программа должна проверять различные типы ошибок. 
На этапе загрузки, например, каждое число, которое пользователь вводит в массив memory вашего Простотрона, должно находиться в диапазоне от -9999 до -1-9999. Ваша программа должна использовать цикл while для проверки, находится ли каждое вводимое число в этом диапазоне, и если нет, предлагать пользователю повторить ввод, до тех пор, пока не будет введено правильное число.

На этапе выполнения ваша программа должна проверять различные серьезные ошибки, такие как попытки деления на О, попытки выполнения неправильных кодов операции, переполнение аккумулятора (т.е. когда результат арифметических операций больше чем -f-9999 или меньше чем -9999) и тому подобное. Такие серьезные ошибки называются неисправимыми ошибками. Если обнаружена неисправимая ошибка, ваша программа должна печатать сообщение об ошибке, например, такое:

*** Попытка деления на 0                         ***
*** Выполнение Простотрона завершено ненормально ***

и должна напечатать полный дамп в формате, который мы уже ранее обсуждали. Это поможет пользователю локализовать место ошибки в программе.


РЕГИСТРЫ

accumulator +0000

instructionCounter 00

instructionRegister +0000

operationCode 00

operand 00

ПАМЯТЬ

