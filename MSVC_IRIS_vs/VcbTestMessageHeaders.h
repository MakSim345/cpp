// *******************************************************************
// *    Datex-Ohmeda Inc.
// *    Ohmeda Drive
// *    PO Box 7550
// *    Madison, WI 53707-7550
// *
// *    Copyright 2000-2003, Datex-Ohmeda Inc.
// *
// *    NOTE:
// *    This file was auto generated from the VcbTest message
// *    description document using the mgen tool.  Listed below
// *    are the version control number and modification time of
// *    the MDD file along with the version of mgen that was used.
// *
// *    MDD Revision:    1.3
// *    MDD Modtime:     May 29 2002 16:20:48 
// *    Mgen Version:    v5.17 12/2/03
// *
// *******************************************************************



/********************************************************************************
      AA   U   U TTTTT  OOO   GGG  EEEE N   N EEEE RRR    AA  TTTTT EEEE DDD
     A  A  U   U   T   O   O G     E    NN  N E    R  R  A  A   T   E    D  D
     AAAA  U   U   T   O   O G  GG EEE  N N N EEE  RRR   AAAA   T   EEE  D  D
     A  A  U   U   T   O   O G   G E    N  NN E    R R   A  A   T   E    D  D
    A    A  UUU    T    OOO   GGG  EEEE N   N EEEE R  R A    A  T   EEEE DDD

            ***THIS FILE IS AUTOGENERATED - DO NOT EDIT MANUALLY***

*********************************************************************************/


#ifndef VCB_TEST_MESSAGES_INCLUDED
#define VCB_TEST_MESSAGES_INCLUDED

/*
** Define IRIS_NO_PATHNAMES to get rid of all pathnames in all autogenerated
** IRIS files.  This allows the files to be placed anywhere but does require
** specifing these paths in the build/project settings of your application.
**
** To prevent undue disruption of established code the old pathnames are still
** used if IRIS_NO_PATHNAMES is not defined.  Applications should be changed to
** NOT require these hardcoded paths as they are deprecated and will eventually
** be removed.
**
** ALL NEW CODE SHOULD DEFINE 'IRIS_NO_PATHNAMES'
*/
#define IRIS_NO_PATHNAMES
#ifdef IRIS_NO_PATHNAMES
#include "Message.h"
#else
#include "IRIS\source\RoseSrc\Message.h"
#endif

/*
** Global Enums defined in this MDD
*/
typedef enum
{
    /*
    Indicates the testing mode the VCB should support on this boot-up. 
    */
    VCB_TEST_MODE_HALT = 0,
    VCB_TEST_MODE_EMC = 1,
    VCB_TEST_MODE_UNDETECTED = 2 //  This is the state the VCB defaults to.
} VCB_TEST_MODE;

typedef enum
{
    /*
    Cal Status Enumeration. 
    */
    VCB_TEST_CAL_STATUS_VCB_ZERO_CAL = 0,
    VCB_TEST_CAL_STATUS_VCB_AIR_VALVE_CAL = 1,
    VCB_TEST_CAL_STATUS_VCB_OXYGEN_VALVE_CAL = 2,
    VCB_TEST_CAL_STATUS_VCB_EXPIRATORY_VALVE_CAL = 3,
    VCB_TEST_CAL_STATUS_VCB_PARACUBE_CAL = 4,
    VCB_TEST_CAL_STATUS_VCB_EXPIRATORY_FLOW_CAL = 5,
    VCB_TEST_CAL_STATUS_VCB_SPAN_CAL = 6,
    VCB_TEST_CAL_STATUS_VCB_CHECKOUT = 7,
    VCB_TEST_CAL_STATUS_VCB_PAW_CHECKOUT = 8,
    VCB_TEST_CAL_STATUS_VCB_BARO_CHECKOUT = 9,
    VCB_TEST_CAL_STATUS_VCB_LEAK_CHECKOUT = 10,
    VCB_TEST_CAL_STATUS_VCB_SAFETY_CHECKOUT = 11,
    VCB_TEST_CAL_STATUS_VCB_EXH_VALVE_CHECKOUT = 12,
    VCB_TEST_CAL_STATUS_VCB_EXH_FLOW_CHECKOUT = 13,
    VCB_TEST_CAL_STATUS_VCB_RESIS_CHECKOUT = 14,
    VCB_TEST_CAL_STATUS_VCB_AIR_SENSOR_CHECKOUT = 15,
    VCB_TEST_CAL_STATUS_VCB_OXYGEN_SENSOR_CHECKOUT = 16,
    VCB_TEST_CAL_STATUS_VCB_PARACUBE_CHECKOUT = 17,
    VCB_TEST_CAL_STATUS_VCB_CHECKOUT_CAL_PASSED = 18,
    VCB_TEST_CAL_STATUS_VCB_CHECKOUT_CAL_FAILED = 19,
    VCB_TEST_CAL_STATUS_VCB_CHECKOUT_CAL_NO_AIR = 20,
    VCB_TEST_CAL_STATUS_VCB_CHECKOUT_CAL_NO_OXYGEN = 21,
    VCB_TEST_CAL_STATUS_VCB_CHECKOUT_CAL_ABORTED = 22,
    VCB_TEST_CAL_STATUS_VCB_CHECKOUT_CAL_NONE = 23,
    VCB_TEST_CAL_STATUS_VCB_CHECKOUT_CAL_COMPLETE = 24,
    VCB_TEST_CAL_STATUS_VCB_AUX_ZERO_CAL = 25,
    VCB_TEST_CAL_STATUS_VCB_LOW_PRESSURE_LEAK_TEST = 26,
    VCB_TEST_CAL_STATUS_VCB_OXYGEN_HIGH_PRESSURE_LEAK_TEST = 27,
    VCB_TEST_CAL_STATUS_VCB_AIR_HIGH_PRESSURE_LEAK_TEST = 28,
    VCB_TEST_CAL_STATUS_VCB_VALVE_SWEEP = 29,
    VCB_TEST_CAL_STATUS_VCB_EXP_VALVE_SWEEP = 30,
    VCB_TEST_CAL_STATUS_VCB_MEASURE_P01 = 31,
    VCB_TEST_CAL_STATUS_VCB_REGULATOR_STEP = 32
} VCB_TEST_CAL_STATUS;

typedef enum
{
    /*
    CMX RTOS task number 
    */
    VCB_TEST_CMX_TASK_OFF = 0,
    VCB_TEST_CMX_TASK_TASK1 = 1,
    VCB_TEST_CMX_TASK_TASK2 = 2,
    VCB_TEST_CMX_TASK_TASK3 = 3,
    VCB_TEST_CMX_TASK_TASK4 = 4,
    VCB_TEST_CMX_TASK_TASK5 = 5,
    VCB_TEST_CMX_TASK_TASK6 = 6,
    VCB_TEST_CMX_TASK_TASK7 = 7,
    VCB_TEST_CMX_TASK_TASK8 = 8,
    VCB_TEST_CMX_TASK_TASK9 = 9,
    VCB_TEST_CMX_TASK_TASK10 = 10,
    VCB_TEST_CMX_TASK_TASK11 = 11,
    VCB_TEST_CMX_TASK_TASK12 = 12,
    VCB_TEST_CMX_TASK_AUTO_CYCLE = 13
} VCB_TEST_CMX_TASK;

typedef enum
{
    /*
    System State Enumeration. 
    */
    VCB_TEST_SYSTEM_STATE_OFF = 0,
    VCB_TEST_SYSTEM_STATE_POWERUP_SELFTEST = 1,
    VCB_TEST_SYSTEM_STATE_STANDBY = 2,
    VCB_TEST_SYSTEM_STATE_CHECKOUT = 3,
    VCB_TEST_SYSTEM_STATE_THERAPY = 4,
    VCB_TEST_SYSTEM_STATE_MONITORING = 5,
    VCB_TEST_SYSTEM_STATE_SERVICE = 6,
    VCB_TEST_SYSTEM_STATE_SUPER_USER = 7,
    VCB_TEST_SYSTEM_STATE_SOFTWARE_UPDATE = 8,
    VCB_TEST_SYSTEM_STATE_FAILED = 9,
    VCB_TEST_SYSTEM_STATE_FAILED_WITH_VENT = 10,
    VCB_TEST_SYSTEM_STATE_MAX = 11
} VCB_TEST_SYSTEM_STATE;

typedef enum
{
    /*
    Trigger to indicate inspiration and expiration periods of the 
    patient breath 
    */
    VCB_TEST_TRIGGER_EXPIRATION_END = 0,
    VCB_TEST_TRIGGER_EXPIRATION_BEGIN = 1,
    VCB_TEST_TRIGGER_INSPIRATION_END = 2,
    VCB_TEST_TRIGGER_INSPIRATION_BEGIN = 3
} VCB_TEST_TRIGGER;

typedef enum
{
    /*
    Calibration Status Enumeration. 
    */
    VCB_TEST_CALIBRATION_STATUS_PASSED = 0,
    VCB_TEST_CALIBRATION_STATUS_FAILED = 1,
    VCB_TEST_CALIBRATION_STATUS_IN_PROGRESS = 2,
    VCB_TEST_CALIBRATION_STATUS_NO_CAL_REQUESTED = 3,
    VCB_TEST_CALIBRATION_STATUS_COMM_ERR = 4
} VCB_TEST_CALIBRATION_STATUS;

typedef enum
{
    /*
    Board type enumeration 
    */
    VCB_TEST_BOARD_TYPE_VCB = 0,
    VCB_TEST_BOARD_TYPE_VMB = 1
} VCB_TEST_BOARD_TYPE;


/***************** START MESSAGE ******************/
/*
Provides type of Sensor, Software, Hardware, Version, Units, Factor, 
Overflow, Sensitivity, Reference Temperature, Factor temperature, 
Sensor Serial Number, Current Temperature value, and Sensor Flow value. 
*/

#define VCB_TEST_SENSOR_INFO_ID 32

class VcbTest_SensorInfo : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SensorInfo();

  void dDialogExchange();
    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Total Flow 
  */
  IRIS_INT32 TotalFlow;

  /*
  Oxygen Flow 
  */
  IRIS_INT32 OxygenFlow;

  /*
  Air Flow 
  */
  IRIS_INT32 AirFlow;

  /*
  Current temperature for compensation 
  */
  IRIS_INT32 TotalCurrentTemp;

  /*
  Current temperature for compensation 
  */
  IRIS_INT32 OxygenCurrentTemp;

  /*
  Current temperature for compensation 
  */
  IRIS_INT32 AirCurrentTemp;

};


/***************** START MESSAGE ******************/
/*
Provides type of Sensor, Software, Hardware, Version, Units, Factor, 
Overflow, Sensitivity, Reference Temperature, Factor temperature, 
Sensor Serial Number, Current Temperature value, and Sensor Flow value. 
*/

#define VCB_TEST_SENSOR_DETAILS_ID 33

class VcbTest_SensorDetails : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SensorDetails();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Units of flow 
  */
  IRIS_BYTE TotalUnits[4];

  /*
  Units of flow 
  */
  IRIS_BYTE OxygenUnits[4];

  /*
  Units of flow 
  */
  IRIS_BYTE AirUnits[4];

  /*
  Divide by this factor to get in Liters 
  */
  IRIS_INT32 TotalFactor;

  /*
  Divide by this factor to get in Liters 
  */
  IRIS_UINT32 OxygenFactor;

  /*
  Divide by this factor to get in Liters 
  */
  IRIS_UINT32 AirFactor;

  /*
  */
  IRIS_UINT32 TotalOverflow;

  /*
  */
  IRIS_UINT32 OxygenOverflow;

  /*
  */
  IRIS_UINT32 AirOverflow;

  /*
  */
  IRIS_UINT32 TotalSensitivity;

  /*
  */
  IRIS_UINT32 OxygenSensitivity;

  /*
  */
  IRIS_UINT32 AirSensitivity;

  /*
  Reference Temperature 
  */
  IRIS_UINT32 TotalRefTemp;

  /*
  Reference Temperature 
  */
  IRIS_UINT32 OxygenRefTemp;

  /*
  Reference Temperature 
  */
  IRIS_UINT32 AirRefTemp;

  /*
  Factor Temperature 
  */
  IRIS_UINT32 TotalFactorTemp;

  /*
  Factor Temperature 
  */
  IRIS_UINT32 OxygenFactorTemp;

  /*
  Factor Temperature 
  */
  IRIS_UINT32 AirFactorTemp;

  /*
  Type of sensor 
  */
  IRIS_BYTE TotalSensorType[8];

  /*
  Type of sensor 
  */
  IRIS_BYTE OxygenSensorType[8];

  /*
  Type of sensor 
  */
  IRIS_BYTE AirSensorType[8];

  /*
  Software version 
  */
  IRIS_BYTE TotalSoftwareVersion[4];

  /*
  Software version 
  */
  IRIS_BYTE OxygenSoftwareVersion[4];

  /*
  Software version 
  */
  IRIS_BYTE AirSoftwareVersion[4];

  /*
  Hardware version 
  */
  IRIS_BYTE TotalHardwareVersion[5];

  /*
  Hardware version 
  */
  IRIS_BYTE OxygenHardwareVersion[5];

  /*
  Hardware version 
  */
  IRIS_BYTE AirHardwareVersion[5];

  /*
  Sensor ID 
  */
  IRIS_UINT32 TotalSensorIDNumber;

  /*
  Sensor ID 
  */
  IRIS_UINT32 OxygenSensorIDNumber;

  /*
  Sensor ID 
  */
  IRIS_UINT32 AirSensorIDNumber;

};

/***************** START MESSAGE ******************/
/*
Channel Configurations for valves and voltage values. 
*/

#define VCB_TEST_CHANNEL_CONFIGURATIONS_ID 34

class VcbTest_ChannelConfigurations : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_ChannelConfigurations();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Expiratory Pressure 
  */
  IRIS_UINT16 InspPressureCounts;

  /*
  Expiratory Pressure 
  */
  IRIS_INT16 InspPressureValue;

  /*
  Aux Pressure 
  */
  IRIS_UINT16 AuxPressureCounts;

  /*
  Aux Pressure 
  */
  IRIS_INT16 AuxPressureValue;

  /*
  Exhalation Valve Drive Voltage 
  */
  IRIS_UINT16 ExhValveVoltageCounts;

  /*
  Exhalation Valve Drive Voltage 
  */
  IRIS_INT32 ExhValveVoltageValue;

  /*
  Exhalation Valve Drive Current 
  */
  IRIS_UINT16 ExhValveCurrentCounts;

  /*
  Exhalation Valve Drive Current 
  */
  IRIS_INT32 ExhValveCurrentValue;

  /*
  Secondary Voltage Reference 
  */
  IRIS_UINT16 V4096refCounts;

  /*
  Secondary Voltage Reference 
  */
  IRIS_INT32 V4096refValue;

  /*
  Analog Ground 
  */
  IRIS_UINT16 MUXA_AGND_Counts;

  /*
  Analog Ground 
  */
  IRIS_INT32 MUXA_AGND_Value;

  /*
  Analog Ground 
  */
  IRIS_UINT16 MUXB_AGND_Counts;

  /*
  Analog Ground 
  */
  IRIS_INT32 MUXB_AGND_Value;

  /*
  Analog Ground 
  */
  IRIS_UINT16 ADC_AGND_Counts;

  /*
  Analog Ground 
  */
  IRIS_INT32 ADC_AGND_Value;

  /*
  Oxygen Valve Drive Current 
  */
  IRIS_UINT16 O2ValveCurrentCounts;

  /*
  Oxygen Valve Drive Current 
  */
  IRIS_INT32 O2ValveCurrentValue;

  /*
  Air Valve Current Counts 
  */
  IRIS_UINT16 AirValveCurrentCounts;

  /*
  Air Valve Current Counts 
  */
  IRIS_INT32 AirValveCurrentValue;

  /*
  Nebulizer Supply Voltage 
  */
  IRIS_UINT16 V9Test_C_Counts;

  /*
  Nebulizer Supply Voltage 
  */
  IRIS_INT32 V9Test_C_Value;

  /*
  Ambient Temperature Near Valves 
  */
  IRIS_UINT16 AmbientTempCounts;

  /*
  Ambient Temperature Near Valves 
  */
  IRIS_INT32 AmbientTempValue;

  /*
  Mod Power Fail 
  */
  IRIS_UINT16 ModPwrFailCounts;

  /*
  Mod Power Fail 
  */
  IRIS_INT32 ModPwrFailValue;

  /*
  12P5 
  */
  IRIS_UINT16 V12P5_Test_Counts;

  /*
  12P5 
  */
  IRIS_INT32 V12P5_Test_Value;

  /*
  5VA 
  */
  IRIS_UINT16 V5VA_Test_Counts;

  /*
  5VA 
  */
  IRIS_INT32 V5VA_Test_Value;

  /*
  6VA 
  */
  IRIS_UINT16 V6VA_Test_Counts;

  /*
  6VA 
  */
  IRIS_INT32 V6VA_Test_Value;

  /*
  N6VA 
  */
  IRIS_UINT16 N6VA_Test_Counts;

  /*
  N6VA 
  */
  IRIS_INT32 N6VA_Test_Value;

  /*
  5P5VA 
  */
  IRIS_UINT16 V5P5VA_Test_Counts;

  /*
  5P5VA 
  */
  IRIS_INT32 V5P5VA_Test_Value;

  /*
  9VA 
  */
  IRIS_UINT16 V9_TestA_Counts;

  /*
  9VA 
  */
  IRIS_INT32 V9_TestA_Value;

  /*
  9VB 
  */
  IRIS_UINT16 V9_TestB_Counts;

  /*
  9VB 
  */
  IRIS_INT32 V9_TestB_Value;

};
/***************** START MESSAGE ******************/
/*
See the status of the input signal latches. 
*/

#define VCB_TEST_INPUT_SIGNAL_LATCH_ID 35

class VcbTest_InputSignalLatch : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_InputSignalLatch();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Mod Power Fail 
  */
  IRIS_BOOL ModPwrFail;

  /*
  Psm Power Fail 
  */
  IRIS_BOOL PsmPwrFail;

  /*
  Over Pressure 
  */
  IRIS_BOOL OverPress;

  /*
  Zero Expired Pressure On 
  */
  IRIS_BOOL ZeroExppOn;

  /*
  VM Buzzer On 
  */
  IRIS_BOOL VmBuzzerOn;

  /*
  Nebulizer sensor 1 
  */
  IRIS_BOOL NebSnse1;

  /*
  Nebulizer sensor 2 
  */
  IRIS_BOOL NebSnse2;

  /*
  Expiration Power Fail 
  */
  IRIS_BOOL ExpPwrFail;

  /*
  Buzzer sensor 
  */
  IRIS_BOOL BuzzerSnse;

  /*
  Zero Auxilary Pressure On 
  */
  IRIS_BOOL ZeroAuxPOn;

  /*
  Vm Exhalation Open 
  */
  IRIS_BOOL VmExhalOpen;

};
/***************** START MESSAGE ******************/
/*
See the status of the input signal latches. 
*/

#define VCB_TEST_PING_CALIBRATION_STATUS_ID 36

class VcbTest_PingCalibrationStatus : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_PingCalibrationStatus();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Current running calibration 
  */
  IRIS_BYTE CalStatus[40];

  /*
  Pass Fail running calibration 
  */
  IRIS_UBYTE PassFailStatus;

  /*
  Percentage complete of current running calibration 
  */
  IRIS_UINT16 CalPercent;

};
/***************** START MESSAGE ******************/
/*
Random Vcb Data 
*/

#define VCB_TEST_OTHER_VCB_DATA_ID 37

class VcbTest_OtherVcbData : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_OtherVcbData();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Vcb Vmb Crc errors 
  */
  IRIS_UINT32 VmbVcbCommErrors;

  /*
  Cpu Loading Average 
  */
  IRIS_UINT16 CpuLoadAvg;

  /*
  Compensated O2 Value 
  */
  IRIS_INT16 O2Comp;

  /*
  Technical alarm status bits #1 reported by the VCB. For all bits: 
  0 = Alarm Not Active 1 = Alarm Active Bit 0: Backup Buzzer POST 
  Bit 1: Standby Patient Detection Bit 2: DU To VCB Comm Error Bit 
  3: VMB To VCB Comm Error Bit 4: VCB Processor Reset Bit 5: Air Supply 
  Pressure High Bit 6: O2 Supply Pressure High Bit 7: Air Supply Pressure 
  Low Bit 8: O2 Supply Pressure Low Bit 9: No Supply Pressure Bit 
  10: Exhalation Flow Sensor Comparision Bit 11: Temp High Bit 12: 
  Negative Pressure Bit 13: No Exhalation Flow Sensor Bit 14: not 
  used Bit 15: not used Bit 16: Barometric Pressure Sensor Out Of 
  Range Bit 17: Exhalation Flow Sensor Communication Failure Bit 18: 
  O2 Supply Pressure Sensor Out Of Range Bit 19: Air Supply Pressure 
  Sensor Out Of Range Bit 20: Paw Insp Sensor Out Of Range Bit 21: 
  Paw Exp Sensor Out Of Range Bit 22: Paux Sensor Out Of Range Bit 
  23: Air Flow Sensor Communications Failure Bit 24: O2 Flow Sensor 
  Communications Failure Bit 25: Total Flow Sensor Communications 
  Failure Bit 26: Air Temperature Sensor Failure Bit 27: O2 Temperature 
  Sensor Failure Bit 28: Total Flow Temperature Sensor Failure Bit 
  29: Nebulizer Not Connected Bit 30: Paw Cross-Check Bit 31: not 
  used 
  */
  IRIS_UINT32 VCBTechnicalAlarmStatus1;

  /*
  Technical alarm status bits #2 reported by the VCB. For all bits: 
  0 = Alarm Not Active 1 = Alarm Active Bit 0: not used Bit 1: not 
  used Bit 2: not used Bit 3: Safety Valve Checkout Failure Bit 4: 
  Paw Insp Zeroing Error Bit 5: Paw Exp Zeroing Error Bit 6: Paux 
  Zeroing Error Bit 7: Paux High Bit 8: Exp Flow Sensor Zeroing Error 
  */
  IRIS_UINT32 VCBTechnicalAlarmStatus2;

  /*
  Parameter alarm status bits reported by the VCB. For all bits: 0 
  = Alarm Not Active 1 = Alarm Active Bit 0: High Paw Bit 1: High 
  Paw Plus Bit 2: High Paw Sustained Bit 3: Low Paw Bit 4: Breathing 
  Circuit Occlusion Bit 5: Breathing Circuit Leak Bit 6: Sustained 
  Paw Bit 7: Apnea Bit 8: MV Expired Low Bit 9: MV Expired High Bit 
  10: Low FiO2 Bit 11: High FiO2 Bit 12: Patient Disconnected Bit 
  13: TV Not Achieved 
  */
  IRIS_UINT32 VCBParameterAlarmStatus;

  /*
  Monitors our waveform submission to see if we are sending data, 
  at the desired 5Hz rate. It is measured as millisecond deviation, 
  from the expected 200ms per transmission. 
  */
  IRIS_UINT16 WaveformJitter;

  /*
  Maximum deviation from expected 500ms timeframe for vent parameters 
  message. 
  */
  IRIS_UINT16 MaxVentParamJitter;

  /*
  Average jitter over 1 minute. 
  */
  IRIS_UINT16 AvgVentParamJitter;

  /*
  Maximum deviation from expected 1s timeframe for system state message. 
  */
  IRIS_UINT16 MaxSysStateJitter;

  /*
  Average jitter over 1 minute. 
  */
  IRIS_UINT16 AvgSysStateJitter;

};
/***************** START MESSAGE ******************/
/*
Vcb System State 
*/

#define VCB_TEST_SYSTEM_STATE_ID 38

class VcbTest_SystemState : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SystemState();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Enum SYSTEM_STATE 
  */
  IRIS_UBYTE SystemState;

};
/***************** START MESSAGE ******************/
/*
This message receives number of interrupts 
*/

#define VCB_TEST_INTERRUPT_NUMBER_ID 39

class VcbTest_InterruptNumber : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_InterruptNumber();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Number of Interrupts 
  */
  IRIS_UINT32 Interrupt;

};
/***************** START MESSAGE ******************/
/*
Used to log CRC errors detected on VCB to VMB and DC to VMB messages 
*/

#define VCB_TEST_CRC_ERROR_CHECK_ID 40

class VcbTest_CrcErrorCheck : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_CrcErrorCheck();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Number of CRC errors detected in VCB to VMB messages since last 
  VMB reset 
  */
  IRIS_UINT16 VcbVmbCrcErrors;

  /*
  Number of CRC errors detected in DC to VMB messages since last VMB 
  reset 
  */
  IRIS_UINT16 DcVmbCrcErrors;

};
/***************** START MESSAGE ******************/
/*
To display the VCB VMB common alarms 
*/

#define VCB_TEST_VCB_VMB_COMMON_ALARMS_ID 41

class VcbTest_VcbVmbCommonAlarms : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_VcbVmbCommonAlarms();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  VCB alarms Bit 9, NEG_PRESS Bit 8, LOW_PAW Bit 7, HIGH_FIO2 Bit 
  6, LOW_FIO2 Bit 5, HIGH_MV Bit 4, LOW_MV Bit 3, APNEA Bit 2, SUSTAINED_PAW 
  Bit 1, HIGH_PAW_PLUS Bit 0, HIGH_PAW 
  */
  IRIS_UINT16 VcbCommonAlarms;

  /*
  VMB alarms Bit 9, NEG_PRESS Bit 8, LOW_PAW Bit 7, HIGH_FIO2 Bit 
  6, LOW_FIO2 Bit 5, HIGH_MV Bit 4, LOW_MV Bit 3, APNEA Bit 2, SUSTAINED_PAW 
  Bit 1, HIGH_PAW_PLUS Bit 0, HIGH_PAW 
  */
  IRIS_UINT16 VmbCommonAlarms;

};
/***************** START MESSAGE ******************/
/*
This message is to send the DAC Value for the span calibration 
*/

#define VCB_TEST_SEND_SPAN_DAC_VALUE_ID 42

class VcbTest_SendSpanDacValue : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendSpanDacValue();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  First value to be sent to the VCB for calibration purposes 
  */
  IRIS_UINT16 DAC_Value;

};
/***************** START MESSAGE ******************/
/*
This message is to send the DAC Value for the air valve 
*/

#define VCB_TEST_SEND_AIRVLV_DAC_ID 43

class VcbTest_SendAirvlvDac : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendAirvlvDac();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  First value to be sent to the VCB for calibration purposes 
  */
  IRIS_UINT16 DAC_Value;

};
/***************** START MESSAGE ******************/
/*
This message is to send the DAC Value for the O2 valve 
*/

#define VCB_TEST_SEND_O2VLV_DAC_ID 44

class VcbTest_SendO2vlvDac : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendO2vlvDac();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  First value to be sent to the VCB for calibration purposes 
  */
  IRIS_UINT16 DAC_Value;

};
/***************** START MESSAGE ******************/
/*
This message is to send the DAC Value for the exhalation valve 
*/

#define VCB_TEST_SEND_EXHVLV_DAC_ID 45

class VcbTest_SendExhvlvDac : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendExhvlvDac();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  First value to be sent to the VCB for calibration purposes 
  */
  IRIS_UINT16 DAC_Value;

};
/***************** START MESSAGE ******************/
/*
This message is to send the Dither DAC Value for the exhalation valve 
*/

#define VCB_TEST_SEND_EXHVLV_DITHER_DAC_ID 46

class VcbTest_SendExhvlvDitherDac : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendExhvlvDitherDac();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  First value to be sent to the VCB for calibration purposes 
  */
  IRIS_UINT16 DAC_Value;

};
/***************** START MESSAGE ******************/
/*
Measured results of the VMB internal power supplies. 
*/

#define VCB_TEST_PWR_VMB_INTERNAL_ID 47

class VcbTest_PwrVmbInternal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_PwrVmbInternal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Scaled 12.5 volt input power supply 
  */
  IRIS_UINT16 P12p5vBits;

  /*
  Scaled 12.5 volt input power supply 
  */
  IRIS_UINT16 P12p5vMv;

  /*
  Scaled -5.5 volt analog power supply 
  */
  IRIS_UINT16 N5p5vBits;

  /*
  Scaled -5.5 volt analog power supply 
  */
  IRIS_UINT16 N5p5vMv;

  /*
  Scaled 5.5 volt analog power supply 
  */
  IRIS_UINT16 P5p5vBits;

  /*
  Scaled 5.5 volt analog power supply 
  */
  IRIS_UINT16 P5p5vMv;

  /*
  Independent 1.22 volt internal microcontroller reference 
  */
  IRIS_UINT16 Vref122Bits;

  /*
  Independent 1.22 volt internal microcontroller reference 
  */
  IRIS_UINT16 Vref122Mv;

  /*
  Analog ground. 
  */
  IRIS_UINT16 AgndBits;

  /*
  Analog ground. 
  */
  IRIS_UINT16 AgndMv;

};
/***************** START MESSAGE ******************/
/*
Measurements of power supply voltages from the VMB to external sensors. 
*/

#define VCB_TEST_PWR_EXT_SENSOR_ID 48

class VcbTest_PwrExtSensor : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_PwrExtSensor();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Scaled 5 volt supply for the Air supply pressure transducer 
  */
  IRIS_UINT16 AirSupplyBits;

  /*
  Scaled 5 volt supply for the Air supply pressure transducer 
  */
  IRIS_UINT16 AirSupplyMv;

  /*
  Scaled 5 volt supply for the O2 supply pressure transducer 
  */
  IRIS_UINT16 O2SupplyBits;

  /*
  Scaled 5 volt supply for the O2 supply pressure transducer 
  */
  IRIS_UINT16 O2SupplyMv;

  /*
  Scaled 5 volt supply for the paramagnetic O2 sensor 
  */
  IRIS_UINT16 O2ParaBits;

  /*
  Scaled 5 volt supply for the paramagnetic O2 sensor 
  */
  IRIS_UINT16 O2ParaMv;

  /*
  Scaled 5 volt supply for the exhilation flow sensor 
  */
  IRIS_UINT16 ExFlowBits;

  /*
  Scaled 5 volt supply for the exhilation flow sensor 
  */
  IRIS_UINT16 ExFlowMv;

};
/***************** START MESSAGE ******************/
/*
Measured A D results of all pressure sensors. 
*/

#define VCB_TEST_PRESS_XDCR_OUT_ID 49

class VcbTest_PressXdcrOut : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_PressXdcrOut();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Output of airway pressure sensor 
  */
  IRIS_UINT16 ExpAirwayBitsMv;

  /*
  Output of barometric pressure sensor 
  */
  IRIS_UINT16 BaroBits;

  /*
  Output of barometric pressure sensor 
  */
  IRIS_UINT16 BaroMv;

  /*
  Output of O2 supply pressure transducer 
  */
  IRIS_UINT16 O2SupplyBits;

  /*
  Output of O2 supply pressure transducer 
  */
  IRIS_UINT16 O2SupplyMv;

  /*
  Output of Air supply pressure transducer 
  */
  IRIS_UINT16 AirSupplyBits;

  /*
  Output of Air supply pressure transducer 
  */
  IRIS_UINT16 AirSupplyMv;

};
/***************** START MESSAGE ******************/
/*
Binary data sensed at the pins of microcontroller ports A, B, C, D 
and E 
*/

#define VCB_TEST_PORT_INPUT_ID 50

class VcbTest_PortInput : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_PortInput();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Data sensed at the Port A pins on the microcontroller Bit 7, not 
  used Bit 6, ADC_CS Bit 5, O2_CS Bit 4, EXCOM_CS Bit 3, not used 
  Bits 2 to 0: analog multiplexer control for 10-bit ADC 
  */
  IRIS_UBYTE PortA;

  /*
  Data sensed at the Port B pins on the microcontroller Bit 7 to 5, 
  not used Bit 4, STROBE Bit 3, MISO Bit 2, MOSI Bit 1, SPI_CLK Bit 
  0, not used 
  */
  IRIS_UBYTE PortB;

  /*
  Data sensed at the Port C pins on the microcontroller Bit 7, UC_ACT 
  Bit 6, not used Bit 5, EXHAL_OPEN Bit 4, SAFE_CLSE Bit 3, ZEROINSP_DIS 
  Bit 2, O2_ON Bit 1, EX_OFF Bit 0, BUZZER_ON 
  */
  IRIS_UBYTE PortC;

  /*
  Data sensed at the Port D pins on the microcontroller Bits 7 to 
  4, not used Bit 3, VMBTX_DURX Bit 2, VMBRX_DUTX Bit 1, EX_SDA Bit 
  0, EX_SCL 
  */
  IRIS_UBYTE PortD;

  /*
  Data sensed at the Port E pins on the microcontroller Bit 7, EXC0M_RDY 
  Bit 6, O2_RDY Bit 5, OK_TO_ZERO Bit 4, OVER_PRESS Bit 3, BUZZER_SNSE 
  Bit 2, EX_SW Bit 1, VMBTX_VCBRX Bit 0, VMBRX_VCBTX 
  */
  IRIS_UBYTE PortE;

};
/***************** START MESSAGE ******************/
/*
Other Vmb Data 
*/

#define VCB_TEST_OTHER_VMB_DATA_ID 51

class VcbTest_OtherVmbData : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_OtherVmbData();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Air supply pressure. Valid range is from 0 to 120 psig. 
  */
  IRIS_UBYTE AirPress;

  /*
  O2 supply pressure. Valid range is from 0 to 120 psig. 
  */
  IRIS_UBYTE O2Press;

  /*
  Pressure value of barometric pressure transducer. Valid range is 
  from 0 to 1088 cmH2O. 
  */
  IRIS_UINT16 BaroPress;

  /*
  Indication of VMB performance 
  */
  IRIS_UINT16 PerfData1;

  /*
  Indication of VMB performance 
  */
  IRIS_UBYTE PerfData2;

  /*
  Measured expiratory flow. Valid range is from 0 to 200 L min. 
  */
  IRIS_INT32 ExpFlow;

  /*
  Status output of expiratory flow sensor. Status bit = 1 indicates 
  an active condition Bits 15 to 8, not used Bit 7, Checksum failure 
  Bit 6, Voltage failure (VCC REF) Bit 5, System calibration failure 
  Bit 4, Sensor calibration failure Bit 3, Shutdown of hot wire Bit 
  2, Clean sensor Bit 1, Data-in-overflow (SSPOV) Bit 0, Command under 
  work (when sensor calibration) 
  */
  IRIS_UINT16 ExpFlowStatus;

  /*
  Uncompensated Paracube O2 measurement data 
  */
  IRIS_INT16 InspO2Pct;

  /*
  Exhaled minute volume. 
  */
  IRIS_UINT16 ExhaledMv;

  /*
  Exhaled tidal volume. 
  */
  IRIS_UINT16 ExhaledTv;

  /*
  Indicates if a VMB microcontroller reset has occurred since the 
  last time the status was sent to the VCB and identifies the source 
  of the last reset. Status: Bit 7, 1=reset occurred (bit cleared 
  after transmission to VCB) Not used: Bits 6 to 5 Source of last 
  microcontroller reset: Bit 4, JTAG instruction Bit 3, Internal watchdog 
  timeout Bit 2, Internal brown out detector Bit 1, External reset 
  applied to microcontroller Bit 0, Power-on reset 
  */
  IRIS_UBYTE VmbReset;

  /*
  Measured breath rate 
  */
  IRIS_UBYTE BreathRate;

  /*
  Technical alarm status bits reported by the Vent Monitor Board. 
  VMB CRC POST failure: A VMB Flash CRC POST failure will only be 
  detected and reported by the VMB Boot code. Boot code will not allow 
  execution of Application code in the event of a CRC failure. The 
  failure information is included in an IRIS status response message. 
  For all bits 0 = Alarm Not Active, 1 = Alarm Active. Bits 7 to 3, 
  not used Bit 2: VMB RAM POST failure Bit 1: DC To VMB Comm Error 
  Bit 0: not used (reserved) 
  */
  IRIS_UBYTE TechnicalAlarms;

  /*
  Parameter alarm status bits #2 reported by the Vent Monitor Board. 
  Status bits will remain active as long as the alarm condition exists. 
  For all bits 0 = Alarm Not Active, 1 = Alarm Active. Bit 0: High 
  Paw Bit 1: High Paw Plus Bit 2: Low Paw Bit 3: Breathing Circuit 
  Occlusion Bit 4: Sustained Paw Bit 5: Apnea Bit 6: MV Expired Low 
  Bit 7: MV Expired High 
  */
  IRIS_UBYTE ParameterAlarms1;

  /*
  Parameter alarm status bits #2 reported by the Vent Monitor Board. 
  Status bits will remain active as long as the alarm condition exists. 
  For all bits 0 = Alarm Not Active, 1 = Alarm Active. Bit 0: Low 
  FiO2 Bit 1: High FiO2 Bits 2 to 7, not used 
  */
  IRIS_UBYTE ParameterAlarms2;

  /*
  Enum PARACUBE_STATUS, describes the current state of the Paracube 
  O2 sensor. 
  */
  IRIS_UBYTE ParaStatus;

  /*
  Enum DATA_STATUS, defining the Data Status for the named data item. 
  */
  IRIS_UBYTE ExhaledMvDataStatus;

  /*
  The current state of system signals monitored by the VMB. Bits 7 
  to 5, not used Bit 4, OVER_PRESS, 0=airway overpressure condition 
  detected by VMB hardware comparator Bit 3, BUZZER_SENSE, 0=VCB buzzer 
  active Bits 2 to 0, not used 
  */
  IRIS_UBYTE VmbSysStatus;

  /*
  Enum DATA_STATUS, defining the Data Status for the named data item. 
  */
  IRIS_UBYTE ExhaledTvDataStatus;

  /*
  Enum DATA_STATUS, defining the Data Status for the named data item. 
  */
  IRIS_UBYTE BreathRateDataStatus;

  /*
  Enum TRIGGER 
  */
  IRIS_UBYTE BreathPeriod;

};
/***************** START MESSAGE ******************/
/*
Measured values of internal VMB performance information. 
*/

#define VCB_TEST_VMB_TASK_INFO_ID 52

class VcbTest_VmbTaskInfo : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_VmbTaskInfo();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Indication of task performance 
  */
  IRIS_UINT16 TaskData1;

  /*
  Indication of task performance 
  */
  IRIS_UBYTE TaskData2;

  /*
  Indication of task performance 
  */
  IRIS_UBYTE TaskData3;

};
/***************** START MESSAGE ******************/
/*
Additional Paracube O2 sensor information 
*/

#define VCB_TEST_PARACUBE_DATA_ID 53

class VcbTest_ParacubeData : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_ParacubeData();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Uncompensated Paracube O2 measurement data. Valid range is from 
  0 to 100%. 
  */
  IRIS_INT16 InspO2PctComp;

  /*
  Serial number in ASCII format 
  */
  IRIS_UBYTE SerialNum[8];

};
/***************** START MESSAGE ******************/
/*
Additional Acutronics flow sensor information 
*/

#define VCB_TEST_ACUTRONICS_INFO_ID 54

class VcbTest_AcutronicsInfo : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_AcutronicsInfo();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  High byte = major version, low byte = minor version 
  */
  IRIS_UINT16 SoftwareVersion;

};
/***************** START MESSAGE ******************/
/*
Send system state 
*/

#define VCB_TEST_VMB_SYSTEM_STATE_ID 55

class VcbTest_VmbSystemState : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_VmbSystemState();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Enum SYSTEM_STATE, defining the system state as received from the 
  DC. 
  */
  IRIS_UBYTE VmbSystemState;

};
/***************** START MESSAGE ******************/
/*
This message sets watchdog strobe on off. 
*/

#define VCB_TEST_SYSTEM_CHECKS_DATA_ID 56

class VcbTest_SystemChecksData : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SystemChecksData();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Number of VCB Flash passes 
  */
  IRIS_UINT16 FlashPasses;

  /*
  Number of VCB Flash failures 
  */
  IRIS_UINT16 FlashFailures;

  /*
  Number of SRAM passes 
  */
  IRIS_UINT16 SramPasses;

  /*
  Number of SRAM failures 
  */
  IRIS_UINT16 SramFailures;

  /*
  Number of EEProm passes 
  */
  IRIS_UINT16 EEPromPasses;

  /*
  Number of EEProm failures 
  */
  IRIS_UINT16 EEPromFailures;

  /*
  Timer ratio 
  */
  IRIS_INT16 TimerRatio;

};
/***************** START MESSAGE ******************/
/*
This message receives the value of leak, compliance and resistance 
after running checkout 
*/

#define VCB_TEST_CHECKOUT_CIRCUIT_CHECK_ID 57

class VcbTest_CheckoutCircuitCheck : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_CheckoutCircuitCheck();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Leak 
  */
  IRIS_UINT16 Leak;

  /*
  Leak 
  */
  IRIS_UINT32 Resistance;

  /*
  Leak 
  */
  IRIS_UINT32 Compliance;

};
/***************** START MESSAGE ******************/
/*
This message returns the leak values of the level 4 diagnostic leak 
tests 
*/

#define VCB_TEST_LEVEL4_DIAGNOSTIC_LEAKS_ID 58

class VcbTest_Level4DiagnosticLeaks : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_Level4DiagnosticLeaks();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Low Pressure Leak 
  */
  IRIS_UINT16 LowPressureLeak;

  /*
  High Oxygen Pressure Leak 
  */
  IRIS_UINT16 HighOxygenPressureLeak;

  /*
  High Air Pressure Leak 
  */
  IRIS_UINT16 HighAirPressureLeak;

};
/***************** START MESSAGE ******************/
/*
This message requests a copy of the NVM error log 
*/

#define VCB_TEST_GET_N_V_M_ERROR_LOG_ID 59

class VcbTest_GetNVMErrorLog : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_GetNVMErrorLog();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  This is a structure of 20 log entries of 16 bytes 
  */
  IRIS_UINT32 NvmLogStrc[80];

};
/***************** START MESSAGE ******************/
/*
This message returns the results of the regulator test. 
*/

#define VCB_TEST_REGULATOR_TEST_RESULTS_ID 60

class VcbTest_RegulatorTestResults : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_RegulatorTestResults();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Total Flow for O2 test 
  */
  IRIS_INT32 TotalFlowWithO2;

  /*
  Oxygen Flow 
  */
  IRIS_INT32 OxygenFlow;

  /*
  % difference error between total and oxygen flow 
  */
  IRIS_UINT16 OxygenPercError;

  /*
  Total Flow for Air test 
  */
  IRIS_INT32 TotalFlowWithAir;

  /*
  Air Flow 
  */
  IRIS_INT32 AirFlow;

  /*
  % difference error between total and air flow 
  */
  IRIS_UINT16 AirPercError;

};
/***************** START MESSAGE ******************/
/*
Status of selected calibration sequence. This message will be sent 
twice when a calibration request is received. The first transmission 
is an acknowledgement of the calibration request. The second is sent 
when the calibration has completed and indicates the result of the 
calibration. This message can also be requested on demand and will 
always indicate the status of the last requested calibration. 
*/

#define VCB_TEST_CAL_STATUS_ID 61

class VcbTest_CalStatus : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_CalStatus();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Indicates which sensor calibration has been selected. For all bits, 
  1 = calibration selected, 0 = no calibration selected. Expiratory 
  pressure sensor: Bit 7, Zero calibration selected Bit 6, Span calibration 
  selected Paramagnetic O2 sensor, internal calibration (must be done 
  at 20.9%, then 100%): Bit 5, 20.9% O2 calibration selected Bit 4, 
  100% O2 calibration selected Paramagnetic O2 sensor, single point 
  adjustment by VMB: Bit 3, Offset calculation selected Expiratory 
  flow sensor: Bit 2, Zero flow calibration selected Not used: Bit 
  1 Bit 0 
  */
  IRIS_UBYTE CalRequested;

  /*
  Enum CALIBRATION_STATUS, defines the current status of the selected 
  calibration. 
  */
  IRIS_UBYTE CurrentStatus;

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start zero calibration 
*/

#define VCB_TEST_START_ZERO_CAL_ID 62

class VcbTest_StartZeroCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartZeroCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  First value to be sent to the VCB for calibration purposes 
  */
  IRIS_UINT16 DAC_Value;

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start span calibration 
*/

#define VCB_TEST_START_SPAN_CAL_ID 63

class VcbTest_StartSpanCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartSpanCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to end span calibration 
*/

#define VCB_TEST_END_SPAN_CAL_ID 64

class VcbTest_EndSpanCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_EndSpanCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start the paracube calibration 
*/

#define VCB_TEST_START_PARACUBE_CAL_ID 65

class VcbTest_StartParacubeCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartParacubeCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start the expiratory flow calibration 
*/

#define VCB_TEST_START_EXP_FLOW_CAL_ID 66

class VcbTest_StartExpFlowCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartExpFlowCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message switches control safety valve to on off. 
*/

#define VCB_TEST_SET_SAFE_CLOSE_ID 67

class VcbTest_SetSafeClose : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetSafeClose();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches control manuever valve to on off. 
*/

#define VCB_TEST_SET_MNVR_OPEN_ID 68

class VcbTest_SetMnvrOpen : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetMnvrOpen();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches ok to zero to on off. 
*/

#define VCB_TEST_SET_OK_TO_ZERO_ID 69

class VcbTest_SetOkToZero : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetOkToZero();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches sw led to on off. 
*/

#define VCB_TEST_SET_SW_LED_ID 70

class VcbTest_SetSwLed : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetSwLed();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches flow sensor power enable to on off. 
*/

#define VCB_TEST_SET_FS_PWR_EN_ID 71

class VcbTest_SetFsPwrEn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetFsPwrEn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches nebulizer on off. 
*/

#define VCB_TEST_SET_NEB_ON_ID 72

class VcbTest_SetNebOn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetNebOn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches Mbus reset to on off. 
*/

#define VCB_TEST_SET_MBUS_RESET_ID 73

class VcbTest_SetMbusReset : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetMbusReset();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches ILIM_MOD_EN to on off. 
*/

#define VCB_TEST_SET_ILIM_MOD_EN_ID 74

class VcbTest_SetIlimModEn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetIlimModEn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches ILIM_PSM_EN to on off. 
*/

#define VCB_TEST_SET_ILIM_PSM_EN_ID 75

class VcbTest_SetIlimPsmEn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetIlimPsmEn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches watchdog to on off. 
*/

#define VCB_TEST_SET_WD_STRB_ID 76

class VcbTest_SetWdStrb : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetWdStrb();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches zero expiratory pressure sensor to on off. 
*/

#define VCB_TEST_SET_EXP_ZERO_ID 77

class VcbTest_SetExpZero : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetExpZero();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches zero auxiliary pressure sensor to on off. 
*/

#define VCB_TEST_SET_AUX_ZERO_ID 78

class VcbTest_SetAuxZero : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetAuxZero();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches buzzer on off. 
*/

#define VCB_TEST_SET_BUZZER_ID 79

class VcbTest_SetBuzzer : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetBuzzer();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches air valve on off. 
*/

#define VCB_TEST_SET_AIR_VALVE_EN_ID 80

class VcbTest_SetAirValveEn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetAirValveEn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches oxygen valve on off. 
*/

#define VCB_TEST_SET_O2_VALVE_EN_ID 81

class VcbTest_SetO2ValveEn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetO2ValveEn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message switches exhalation valve on off. 
*/

#define VCB_TEST_SET_EXH_VALVE_EN_ID 82

class VcbTest_SetExhValveEn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetExhValveEn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message tests the EEProm 
*/

#define VCB_TEST_SEND_E_E_PROM_TEST_ID 83

class VcbTest_SendEEPromTest : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendEEPromTest();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message gets the progress for the EEProm test 
*/

#define VCB_TEST_E_E_PROM_TEST_PROGRESS_ID 84

class VcbTest_EEPromTestProgress : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_EEPromTestProgress();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Progress of the EEProm test 
  */
  IRIS_UINT16 Progress;

};
/***************** START MESSAGE ******************/
/*
This message sets buzzer on off. 
*/

#define VCB_TEST_SET_VMB_BUZZER_ON_ID 85

class VcbTest_SetVmbBuzzerOn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetVmbBuzzerOn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message sets exhal open close. 
*/

#define VCB_TEST_SET_VMB_EXHAL_OPEN_ID 86

class VcbTest_SetVmbExhalOpen : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetVmbExhalOpen();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message sets ex on off. 
*/

#define VCB_TEST_SET_VMB_EX_ON_ID 87

class VcbTest_SetVmbExOn : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetVmbExOn();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message sets O2 on off. 
*/

#define VCB_TEST_SET_VMB_O2_ON_ID 88

class VcbTest_SetVmbO2On : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetVmbO2On();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message sets safe close on off. 
*/

#define VCB_TEST_SET_VMB_SAFE_CLSE_ID 89

class VcbTest_SetVmbSafeClse : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetVmbSafeClse();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message sets sw led on off. 
*/

#define VCB_TEST_SET_VMB_SW_LED_ID 90

class VcbTest_SetVmbSwLed : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetVmbSwLed();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message sets watchdog strobe on off. 
*/

#define VCB_TEST_SET_VMB_WD_STROBE_ID 91

class VcbTest_SetVmbWdStrobe : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetVmbWdStrobe();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to on off 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
This message initializes the bits for the vmb outputs 
*/

#define VCB_TEST_INITIALIZE_VMB_OUTPUTS_ID 92

class VcbTest_InitializeVmbOutputs : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_InitializeVmbOutputs();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to default value 
  */
  IRIS_UBYTE Bit;

};
/***************** START MESSAGE ******************/
/*
This message causes one interrupt on the VCB 
*/

#define VCB_TEST_SEND_INTERRUPT_ID 93

class VcbTest_SendInterrupt : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendInterrupt();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
Stops the watchdog from servicing and resets the VCB 
*/

#define VCB_TEST_STOP_WD_RESET_VCB_ID 94

class VcbTest_StopWdResetVcb : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StopWdResetVcb();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start the checkout 
*/

#define VCB_TEST_START_CHECKOUT_CAL_ID 95

class VcbTest_StartCheckoutCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartCheckoutCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
Specifies CMX task to be monitored for performance evaluation. 
*/

#define VCB_TEST_TASK_MONITOR_ID 96

class VcbTest_TaskMonitor : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_TaskMonitor();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Enum CMX_TASK 
  */
  IRIS_UBYTE TaskNum;

};
/***************** START MESSAGE ******************/
/*
This message is sent to start the high air leak test 
*/

#define VCB_TEST_START_HIGH_AIR_LEAK_ID 97

class VcbTest_StartHighAirLeak : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartHighAirLeak();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent to start the high O2 leak test 
*/

#define VCB_TEST_START_HIGH_O2_LEAK_ID 98

class VcbTest_StartHighO2Leak : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartHighO2Leak();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent to start the low pressure leak test 
*/

#define VCB_TEST_START_LOW_P_LEAK_ID 99

class VcbTest_StartLowPLeak : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartLowPLeak();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start air calibration 
*/

#define VCB_TEST_START_AIR_CAL_ID 100

class VcbTest_StartAirCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartAirCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start oxygen calibration 
*/

#define VCB_TEST_START_OXYGEN_CAL_ID 101

class VcbTest_StartOxygenCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartOxygenCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start exhalation calibration 
*/

#define VCB_TEST_START_EXH_CAL_ID 102

class VcbTest_StartExhCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartExhCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to get Air, O2 and Exh calibration 
tables 
*/

#define VCB_TEST_GET_CALIBRATION_TABLES_ID 103

class VcbTest_GetCalibrationTables : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_GetCalibrationTables();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Air Valve - Flow values in calibration table. 
  */
  IRIS_UINT32 AirValveCalFlowData[23];

  /*
  Air Valve - Counts in calibration table. 
  */
  IRIS_UINT16 AirValveCalCountsData[23];

  /*
  O2 Valve - Flow values in calibration table. 
  */
  IRIS_UINT32 O2ValveCalFlowData[23];

  /*
  O2 Valve - Counts in calibration table. 
  */
  IRIS_UINT16 O2ValveCalCountsData[23];

  /*
  Exh Valve - Pressure values in calibration table. 
  */
  IRIS_UINT16 ExhValveCalPressureData[16];

  /*
  Exh Valve - Counts in calibration table. 
  */
  IRIS_UINT16 ExhValveCalCountsData[16];

};
/***************** START MESSAGE ******************/
/*
Requests the data contained in sixteen consecutive locations of the 
EEPROM located in the VMB microcontroller. The starting address of 
the EEPROM data is specified. 
*/

#define VCB_TEST_DATA_REQUEST_MICRO_EEPROM_ID 104

class VcbTest_DataRequestMicroEeprom : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_DataRequestMicroEeprom();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Starting address for the EEPROM data. Valid range is 0 to 0xFF0 
  */
  IRIS_UINT16 StartAddr;

};
/***************** START MESSAGE ******************/
/*
Request to clear the eeprom 
*/

#define VCB_TEST_CLEAR_EEPROM_LOG_ID 105

class VcbTest_ClearEepromLog : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_ClearEepromLog();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Address for clearing the EEPROM data. Valid range is 0 to 0xFF0 
  */
  IRIS_UINT16 Address;

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start valve sweep calibration 
*/

#define VCB_TEST_START_VALVE_SWEEP_CAL_ID 106

class VcbTest_StartValveSweepCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartValveSweepCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
Sent by test package to burn hardware rev information 
*/

#define VCB_TEST_BURN_HARDWARE_REV_INFORMATION_ID 107

class VcbTest_BurnHardwareRevInformation : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_BurnHardwareRevInformation();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Part Number 
  */
  IRIS_BYTE PartNumRev[20];

  /*
  Serial Number 
  */
  IRIS_BYTE SerialNum[8];

  /*
  Enumeration BOARD_TYPE indicates VCB or VMB 
  */
  IRIS_UBYTE BoardType;

};
/***************** START MESSAGE ******************/
/*
Get existing hardware rev information 
*/

#define VCB_TEST_GET_VCB_HARDWARE_REV_INFO_ID 108

class VcbTest_GetVcbHardwareRevInfo : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_GetVcbHardwareRevInfo();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Part Number 
  */
  IRIS_UBYTE PartNumRev[20];

  /*
  Serial Number 
  */
  IRIS_UBYTE SerialNum[8];

};
/***************** START MESSAGE ******************/
/*
Data contained in sixteen consecutive locations of the EEPROM located 
in the VMB microcontroller. The starting address of the EEPROM data 
is specified. 
*/

#define VCB_TEST_MICRO_EEPROM_ID 109

class VcbTest_MicroEeprom : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_MicroEeprom();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value of airway pressure transducer. Valid range is from 
  -20 to 120 cmH2O. 
  */
  IRIS_INT16 ExpAirwayPress;

  /*
  Starting address for the EEPROM data. Valid range is 0 to 0xFF0 
  */
  IRIS_UINT16 StartAddr;

  /*
  Sixteen EEPROM data bytes in consecutive order, starting from the 
  specified address 
  */
  IRIS_UBYTE Data[16];

};
/***************** START MESSAGE ******************/
/*
Clears the NVM Error Log 
*/

#define VCB_TEST_CLEAR_N_V_M_ERROR_LOG_ID 110

class VcbTest_ClearNVMErrorLog : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_ClearNVMErrorLog();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start expiratory valve sweep calibration 
*/

#define VCB_TEST_START_EXPIRATORY_VALVE_SWEEP_CAL_ID 111

class VcbTest_StartExpiratoryValveSweepCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartExpiratoryValveSweepCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Dither value to send to expiratory valve sweep cal 
  */
  IRIS_UINT16 Dither;

  /*
  Dither value to send to expiratory valve sweep cal 
  */
  IRIS_INT32 Flow;

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to start the regulator step test 
*/

#define VCB_TEST_START_REGULATOR_STEP_ID 112

class VcbTest_StartRegulatorStep : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartRegulatorStep();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
This message is sent by the test to the VMB to cal the baro pressure 
transducer 
*/

#define VCB_TEST_START_BARO_PRESS_CAL_ID 113

class VcbTest_StartBaroPressCal : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_StartBaroPressCal();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Pressure value used calculate new gain for baro pressure transducer 
  */
  IRIS_INT16 UserPressure;

};
/***************** START MESSAGE ******************/
/*
This message sets expiratory zero valve open close 
*/

#define VCB_TEST_SET_VMB_EXP_ZERO_OPEN_ID 114

class VcbTest_SetVmbExpZeroOpen : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SetVmbExpZeroOpen();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Set to 1=open 0=close 
  */
  IRIS_UBYTE Setting;

};
/***************** START MESSAGE ******************/
/*
Get System Software Version 
*/

#define VCB_TEST_GET_SYSTEM_SOFTWARE_VERSION_INFO_ID 115

class VcbTest_GetSystemSoftwareVersionInfo : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_GetSystemSoftwareVersionInfo();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  System Software Version 
  */
  IRIS_UINT16 SoftwareVersion;

  /*
  Build number 
  */
  IRIS_UINT16 BuildNumber;

};
/***************** START MESSAGE ******************/
/*
This message is to send the DAC Value for the Expansion Insp DAC (NFS) 
*/

#define VCB_TEST_SEND_EXPANSION_INSP_DAC_ID 116

class VcbTest_SendExpansionInspDac : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendExpansionInspDac();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Sent for flow sensor zeroing purposes 
  */
  IRIS_UINT16 DAC_Value;

};
/***************** START MESSAGE ******************/
/*
This message is to send the DAC Value for the Expansion Exp DAC (NFS) 
*/

#define VCB_TEST_SEND_EXPANSION_EXP_DAC_ID 117

class VcbTest_SendExpansionExpDac : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_SendExpansionExpDac();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Sent for flow sensor zeroing purposes 
  */
  IRIS_UINT16 DAC_Value;

};
/***************** START MESSAGE ******************/
/*
Flow Info for Neonatal Flow Sensor. 
*/

#define VCB_TEST_NEON_FLOW_SENSOR_INFO_ID 118

class VcbTest_NeonFlowSensorInfo : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_NeonFlowSensorInfo();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Inspiratory Flow Counts 
  */
  IRIS_UINT16 InspFlowCounts;

  /*
  Last Inspiratory Flow DAC used to achieve zero 
  */
  IRIS_UINT16 InspZeroDac;

  /*
  Expiratory Flow Counts 
  */
  IRIS_UINT16 ExpFlowCounts;

  /*
  Last Expiratory DAC used to achieve zero 
  */
  IRIS_UINT16 ExpZeroDac;

  /*
  Neon Net Flow 
  */
  IRIS_INT32 NetFlowValue;

  /*
  Zero counts used for last zero procedure 
  */
  IRIS_UINT16 ZeroCounts;

  /*
  Current insp DAC offset since last zero procedure 
  */
  IRIS_INT32 InspZeroOffset;

  /*
  Current exp DAC offset since last zero procedure 
  */
  IRIS_INT32 ExpZeroOffset;

  /*
  Last TVi measured from NFS 
  */
  IRIS_INT32 NeonTVi;

  /*
  Last TVe measured from NFS 
  */
  IRIS_INT32 NeonTVe;

  /*
  Last TVi measured from vent insp exp sensors 
  */
  IRIS_INT32 VentTVi;

  /*
  Last TVe measured from vent insp exp sensors 
  */
  IRIS_INT32 VentTVe;

  /*
  Exp volume detected from NFS during the last insp phase 
  */
  IRIS_INT32 InspReverseTV;

};
/***************** START MESSAGE ******************/
/*
Perform the zero procedure on the neonatal flow sensor 
*/

#define VCB_TEST_ZERO_NEONATAL_FLOW_SENSOR_ID 119

class VcbTest_ZeroNeonatalFlowSensor : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_ZeroNeonatalFlowSensor();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

};
/***************** START MESSAGE ******************/
/*
Air and O2 FCV Bias Count Data 
*/

#define VCB_TEST_FLOW_CONTROL_VALVE_BIAS_COUNTS_ID 120

class VcbTest_FlowControlValveBiasCounts : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_FlowControlValveBiasCounts();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Air Valve bias shift (dac counts) 
  */
  IRIS_INT16 AirValveBias;

  /*
  O2 Valve bias shift (dac counts) 
  */
  IRIS_INT16 O2ValveBias;

};
/***************** START MESSAGE ******************/
/*
Vista Debug Info 
*/

#define VCB_TEST_VISTA_INFO_ID 121

class VcbTest_VistaInfo : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_VistaInfo();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Sequence number of the last loop sent to the DU 
  */
  IRIS_UBYTE LastLoop;

  /*
  Sequence number of the last curve sent to the DU 
  */
  IRIS_UBYTE LastCurve;

  /*
  Reason for invalid data (numeric code) 
  */
  IRIS_UBYTE InvalidData;

  /*
  Calculated spontaneous patient resistance 
  */
  IRIS_UINT32 SpontRpat;

  /*
  Vista debug output messges, separated by , 
  */
  IRIS_BYTE VistaDebugMsg[40];

};
/***************** START MESSAGE ******************/
/*
VMB-measured expiratory and inspiratory flow data from the neonatal 
flow sensor. 
*/

#define VCB_TEST_VMB_NEON_DATA_ID 122

class VcbTest_VmbNeonData : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_VmbNeonData();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Measured output of hot wire sensing circuit for expiratory flow 
  */
  IRIS_UINT16 ExpHotBits;

  /*
  Expiratory flow measured by the neonatal sensor, corrected for altitude 
  and temperature. Valid range is from 0 to 32 L min. 
  */
  IRIS_UINT16 ExpFlow;

  /*
  Measured output of hot wire sensing circuit for inspiratory flow 
  */
  IRIS_UINT16 InspHotBits;

  /*
  Inspiratory flow measured by the neonatal sensor, corrected for 
  altitude and temperature. Valid range is from 0 to 32 L min. 
  */
  IRIS_UINT16 InspFlow;

  /*
  Flow offset value to be added to the neonatal flow sensor A D conversion 
  result. The resulting sum will be forced to zero if negative and 
  will be used as the index into the flow conversion table. VCB and 
  VMB flow measurement ADC bit weights must be identical. 
  */
  IRIS_INT16 ZeroFlowOffset;

};
/***************** START MESSAGE ******************/
/*
Get existing hardware rev information 
*/

#define VCB_TEST_GET_VMB_HARDWARE_REV_INFO_ID 123

class VcbTest_GetVmbHardwareRevInfo : public Message
{
public:
    // Initialize the ID and serialized and de-serialized sizes
  VcbTest_GetVmbHardwareRevInfo();


    // Validate the entire message
    // Returns: true = validate OK, false = validate FAIL
  bool validate();

    // Serialize the current state into a contigous, packed stream in dataPkt
   // Returns: Length of packet
  int serialize(IRIS_UBYTE *dataPkt);

    // Take a pointer into a contigous, packed stream and fill in the message members
    // Returns: IRIS_OK or IRIS_CRC_FAIL
  int deserialize(IRIS_UBYTE *dataPkt, IRIS_UINT32 length);

    // Auto generated message ID
  static const int msgID;

    // Get the message name as a string
  virtual const char *toString() { return nameStr; }

private:
    // String representation of message name
  static const char nameStr[];

  /*** Message member varibles ***/

public:

  /*
  Part Number 
  */
  IRIS_UBYTE PartNumRev[20];

  /*
  Serial Number 
  */
  IRIS_UBYTE SerialNum[8];

};

#endif

//#endif // #if 0